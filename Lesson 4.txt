Scope is a current context of execution, simplly where the variable is accessable. 
If JS engine canâ€™t find the local variable in the current EC it will look to nearest parent EC for that variable until engine reaches the GEC, 
Lexical envirement means Local memory plus reference to Lexical envirement of the Lexical parent, which itself contains Local+Lexical, up to GEC.
Lexical parent means in which envirement function exists (phiscally written)
So going throw this Lexical envirement known as Scope chain.

Whenever we have function nested inside another function the Inner function is going to create Clouser from the Outer function EC and itself, 
and whenever Inner is invoked, it can have access to the variable environment of Outer EC through the Clouser Scope. 
And while executing the Inner function if it needs the variable that is missing from its FEC it will first look into Clouser Scope (scope chain). 
Whenever function is returnd it remembers his initial Lexical envirement,
so not only the function is returned, but the clouser which contains function and its initial Lexical envirement.
So function alonge with its Lexical envirement bundled together forms a clouser.
Clousers variables are not Garbige collectored.

Block in JS is defined by curly braces {}, it used to combain multiple JS statements into one group.
The usage of this to give JS multiple statements when it expects only one.
E.g. if(condition) {}
Shadowing is like override variables in deiffernet scope. E.g.
let a = 1
{
    let a = 2
}
We cann't shadow Global let with Block var, it same as redecearing let in the same scope.
This is known as Inlegal shadowing.
There is no Inlegal shadowing for function scope.

Let will die at the end of the scope where it was decleared.