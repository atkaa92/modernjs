// ------------------ 6 --------------------
// console.time('alo');
//     console.log(123);
// console.timeEnd('alo');

// ------------------ 7 --------------------
// Variables contain letter, number, $, _
// Cant start with number

// ------------------ 8 --------------------
// JS has two data types ` primitive and reference
// Primitive - string, number, boolean, null, undefined, symbol
// Refernece - array, object, function, date, etc.
// JS is a dinamicly types language, data types are asociated with values not with variables, same variable can hold different type of values
// Typescript is a superset of JS which make it staticly typed language
// All reference types are objects 

// ------------------ 9 --------------------
// Length of number is undefined
// Type of NaN is number

// ------------------ 32 -------------------
// Event bubling and delegation
// Bubling - eg. buble click event up, throw dom tree for all parents
// Delegation - put event on parent and get target by condition throw the childs

// ------------------ 45 -------------------
// JS has a lot of build in constractors, eg.
// const alo = new String('alo'), can be added property to it -> like alo.age = 45, typeof alo = object
// alo === 'alo' -> false, alo == 'alo' -> true
// same for new Number(123) and new Boolean(true)
// new Function('x', 'y', 'return  1 + 1')
// new Object({name: "Alo"}), same as {name: "Alo"}
// new Array(1,2,3), same as [1,2,3]
// new RegExp('\\w+'), same as /\w+/

// ------------------ 46 -------------------
// The main goal of prototype is not to repeat all methodes over and over for every object instence, no to hardcode them to each instence
// Each object in Js has a prototype, and prototype in an object itself
// All objects inherit their properties and methods from their prototype
// Prtotype properties are not owned property for constractor
// ES5 inheritence
// function Perosn(name) {
//     this.name = name
// }
// function User(name, email) {
//     Perosn.call(this, name)
//     this.email = email
// }
// User.prototype = Object.create(Person.prototype)
// User.prototype.constructor = User
// Class Object is the main class in JS, and its in prototype for all Objects

// ------------------ 49 -------------------
// Any method added inside the ES6 Class will be added to it's prototype

// MAPS = key-value pairs - can use ANY type as a key or value
// SETS - Store unique values of any type

// Desturcturing gives us an easy way to assign and extruct variables arrays and objects

// Destructuring Assignment
// let a, b;
// [a, b] = [100, 200];
// Rest pattern
// [a, b, c, ...rest] = [100, 200, 300, 400, 500];

// ({ a, b } = { a: 100, b: 200, c: 300, d: 400, e: 500 });
// ({ a, b, ...rest} = { a: 100, b: 200, c: 300, d: 400, e: 500 });

// Array Destructuring

// const people = ['John', 'Beth', 'Mike'];

// const [person1, person2, person3] = people;

// console.log(person1, person2, person3);

// Parse array returned from function
// function getPeople() {
//   return ['John', 'Beth', 'Mike'];
// }

// let person1, person2, person3;
// [person1, person2, person3] = getPeople();

// console.log(person1, person2, person3);

// Object Destructuring

// const person = {
//   name: 'John Doe',
//   age: 32,
//   city: 'Miami',
//   gender: 'Male',
//   sayHello: function(){
//     console.log('Hello');
//   }
// }

// Old ES5
// const name = person.name,
//       age = person.age,
//       city = person.city;

// New ES6 Destructuring
// const { name, age, city, sayHello } = person;

// console.log(name, age, city);

// sayHello();

A polyfill is a piece of code (usually JavaScript on the Web) used to provide modern functionality on older browsers that do not natively support it.

// Module pattern allows us to break up parts of our code info self contain modules with private variables and functions

// Singletone object is anonymous and it can only return one instence of an object at a time
// Repeated call will just return the same instance

// Factory pattern is a way of creating an interface for creating objects, 
// but we can let subclasses define which class to instantiate

// Observer pattern allowes us to subsribe and unsubscribe to certain events or certain functionality

// Iterators like an advanced loops that can be like paused and return multiple values 
// Generators like a function that can be like paused and return multiple values 
// They are doing quite the same, doing the same but different way

// Iterator Example
// function nameIterator(names) {
//   let nextIndex = 0;

//   return {
//     next: function() {
//       return nextIndex < names.length ?
//       { value: names[nextIndex++], done: false } :
//       { done: true }
//     }
//   }
// }

// // Create an array of names
// const namesArr = ['Jack', 'Jill', 'John'];
// // Init iterator and pass in the names array
// const names = nameIterator(namesArr);

// console.log(names.next().value);
// console.log(names.next().value);
// console.log(names.next().value);
// console.log(names.next().value);

// Generator Example
// function* sayNames() {
//   yield 'Jack';
//   yield 'Jill';
//   yield 'John';
// }

// const name = sayNames();

// console.log(name.next().value);
// console.log(name.next().value);
// console.log(name.next().value);
// console.log(name.next().value);

// ID Creator
// function* createIds() {
//     let index = 1;
  
//     while(true) {
//       yield index++;
//     }
//   }
  
//   const gen = createIds();
  
//   console.log(gen.next().value);
//   console.log(gen.next().value);
//   console.log(gen.next().value);
//   console.log(gen.next().value);
//   console.log(gen.next().value);
//   console.log(gen.next().value);